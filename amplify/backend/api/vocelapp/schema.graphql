#The rules argument in the @auth directive can have different configurations based on the specific requirements of your application. Here are some commonly used options for the rule:
#
#allow: owner: Allows the owner of the data to perform operations.
#allow: groups: Allows specific groups to perform operations.
#allow: public: Allows public access to perform operations (no authentication required).
#allow: private: Restricts access to only authenticated users.
#allow: groups, private: Allows specific groups and authenticated users to perform operations.
#allow: owner, groups: Allows the owner and specific groups to perform operations.

type Announcement @model @auth(rules: [{ allow: owner }]) {
    id: ID!
    tripName: String!
    description: String!
    startDate: AWSDate!
    endDate: AWSDate!
    isCompleted: Boolean!
    isPinned: Boolean!
}

type VocelEvent @model @auth(rules: [{ allow: owner }]) {
    id: ID!
    eventTitle: String!
    eventLocation: String!
    eventGroup: ProfileRole!
    eventDescription: String!
    startTime: AWSDateTime!
    duration: Int!
    eventImageUrl: String
    eventImageKey: String
}

enum ProfileRole {
    BELL
    EETC
    VCPA
}


type Post @model @auth(rules: [{ allow: owner, ownerField: "postAuthor" }]) {
    id: ID!
    postAuthor: String!
    postContent: String! @auth(rules: [{ allow: owner }])
    likes: Int!
    comments: [Comment] @hasMany(indexName: "byPost", fields: ["postID"])
}

type Comment @model {
    id: ID!
    commentAuthor: String!
    commentContent: String!
    post: Post @belongsTo(fields: ["postID"])
    postID: ID! @index(name: "byPost", sortKeyFields: ["id"])
}
