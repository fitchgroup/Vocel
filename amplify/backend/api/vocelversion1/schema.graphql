## This "input" configures a global authorization rule to enable public access to
## all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
#input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!
#
#type Blog @model {
#  id: ID!
#  name: String!
#  posts: [Post] @hasMany
#}
#
#type Post @model {
#  id: ID!
#  title: String!
#  blog: Blog @belongsTo
#  comments: [Comment] @hasMany
#}
#
#type Comment @model {
#  id: ID!
#  post: Post @belongsTo
#  content: String!
#}

#The rules argument in the @auth directive can have different configurations based on the specific requirements of your application. Here are some commonly used options for the rule:
#
#allow: owner: Allows the owner of the data to perform operations.
#allow: groups: Allows specific groups to perform operations.
#allow: public: Allows public access to perform operations (no authentication required).
#allow: private: Restricts access to only authenticated users.
#allow: groups, private: Allows specific groups and authenticated users to perform operations.
#allow: owner, groups: Allows the owner and specific groups to perform operations.

type Announcement @model @auth(rules: [
    { allow: owner, operations: [update, read, create, delete] },
    { allow: groups, groups: ["Staffversion1"], operations: [create, update, delete, read] },
    { allow: groups, groups: ["Bellversion1", "Eetcversion1", "Vcpaversion1"], operations: [read] },
    { allow: public, operations: [read] }
])
{
    id: ID!
    tripName: String!
    description: String!
    #    startDate: AWSDate!
    #    endDate: AWSDate!
    announcementGroup: ProfileRole!
    isCompleted: Boolean!
    isPinned: Boolean!
    likes: [String]
    comments: [CommentAnnouncement] @hasMany
}

type CommentAnnouncement @model @auth(rules: [
    { allow: owner, operations: [update, read, create, delete] },
    { allow: groups, groups: ["Staffversion1"], operations: [create, update, delete, read] },
    { allow: public, operations: [read] }
]) {
    id: ID!
    commentAuthor: String!
    commentContent: String!
    announcement: Announcement @belongsTo
    content: String!
}




type VocelEvent @model @auth(rules: [
    { allow: owner, operations: [update, read, create, delete] },
    { allow: groups, groups: ["Staffversion1"], operations: [create, update, delete, read] },
    { allow: public, operations: [read] }
]) {
    id: ID!
    eventTitle: String!
    eventLocation: String!
    eventGroup: ProfileRole!
    eventDescription: String!
    startTime: AWSDateTime!
    duration: Int!
    eventImageUrl: String
    eventImageKey: String
}

enum ProfileRole {
    ALL
    STAFF
    BELL
    EETC
    VCPA
    UNASSIGNED
}

#type VocelMessage @model @auth(rules: [
#    { allow: owner, operations: [read, update, delete] },
#    { allow: public, operations: [read] }
#]) {
#    id: ID!
#    content: String! @auth(rules: [{ allow: owner, operations: [read, update, delete] }, { allow: public, operations: [read] }])
#    messageImageUrl: String @auth(rules: [{ allow: owner, operations: [read, update, delete] }, { allow: public, operations: [read] }])
#    messageImageKey: String @auth(rules: [{ allow: owner, operations: [read, update, delete] }, { allow: public, operations: [read] }])
#    attachedLink: String @auth(rules: [{ allow: owner, operations: [read, update, delete] }, { allow: public, operations: [read] }])
#    sender: String! @auth(rules: [{ allow: owner, operations: [read, update, delete] }, { allow: public, operations: [read] }])
#    receiver: String! @auth(rules: [{ allow: owner, operations: [read, update, delete] }, { allow: public, operations: [read] }])
#}

type VocelMessage @model @auth(rules: [
    { allow: owner, operations: [update, read, create, delete] },
    { allow: groups, groups: ["Staffversion1"], operations: [create, update, delete, read] },
    { allow: groups, groups: ["Bellversion1", "Eetcversion1", "Vcpaversion1"], operations: [create, delete, read, update] },
    { allow: public, operations: [read] }
]) {
    id: ID!
    content: String!
    messageImageUrl: String
    messageImageKey: String
    attachedLink: String
    sender: String!
    receiver: String!
}

type Post @model @auth(rules: [
    { allow: owner, operations: [update, read, create, delete] },
    { allow: groups, groups: ["Staffversion1"], operations: [create, update, delete, read] },
    { allow: groups, groups: ["Bellversion1", "Eetcversion1", "Vcpaversion1"], operations: [create, delete, read] },
    { allow: public, operations: [read] }
]) {
    id: ID!
    postAuthor: String! @auth(rules: [{ allow: owner, operations: [create, read, update, delete] }, { allow: public, operations: [read] }, { allow: groups, groups: ["Staffversion1"], operations: [create, update, delete, read] }, { allow: groups, groups: ["Bellversion1", "Eetcversion1", "Vcpaversion1"], operations: [create, delete, read] }])
    postContent: String! @auth(rules: [{ allow: owner, operations: [create, read, update, delete] }, { allow: public, operations: [read] }, { allow: groups, groups: ["Staffversion1"], operations: [create, update, delete, read] }, { allow: groups, groups: ["Bellversion1", "Eetcversion1", "Vcpaversion1"], operations: [create, delete, read] }])
    postGroup: ProfileRole!
    likes: [String] @auth(rules: [{ allow: public, operations: [read, update] }, { allow: groups, groups: ["Staffversion1"], operations: [create, update, delete, read] }, { allow: groups, groups: ["Bellversion1", "Eetcversion1", "Vcpaversion1"], operations: [create, delete, read, update] }])
    comments: [Comment] @hasMany
}

type Comment @model @auth(rules: [
    { allow: owner, operations: [update, read, create, delete] },
    { allow: groups, groups: ["Staffversion1"], operations: [create, update, delete, read] },
    { allow: public, operations: [read] }
]) {
    id: ID!
    commentAuthor: String!
    commentContent: String!
    post: Post @belongsTo
    content: String!
}

enum MessageType {
    audio,
    custom,
    file,
    image,
    system,
    text,
    unsupported,
    video
}



#
#type Post @model @auth(rules: [
#  { allow: owner, operations: [read, update, delete] },
#  { allow: public, operations: [read] }
#]) {
#  id: ID!
#  postAuthor: String! @auth(rules: [{ allow: owner, operations: [read, update, delete] }, { allow: public, operations: [read] }])
#  postContent: String! @auth(rules: [{ allow: owner, operations: [read, update, delete] }, { allow: public, operations: [read] }])
#  likes: [String] @auth(rules: [{ allow: public, operations: [read, update] }])
#  # comments: [Comment] @hasMany(indexName: "byPost", fields: ["postID"])
#}


#type Comment @model {
#    id: ID!
#    commentAuthor: String!
#    commentContent: String!
#    post: Post @belongsTo(fields: ["postID"])
#    postID: ID! @index(name: "byPost", sortKeyFields: ["id"])
#}
